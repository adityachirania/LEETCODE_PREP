/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    pair<pair<bool,int>,pair<int,int>> solve(TreeNode* root,int &sum){
        if(root->right==NULL && root->left==NULL){
           pair<pair<bool,int>,pair<int,int>>p;
            p.first.first=true;
            p.first.second=root->val;
            p.second.first=root->val;
            p.second.second=root->val;
            if(sum < root->val)
                sum =root->val;
            return p;
        }
        pair<pair<bool,int>,pair<int,int>> left=make_pair(make_pair(true,0),make_pair(INT_MIN,INT_MIN));
        pair<pair<bool,int>,pair<int,int>> right=make_pair(make_pair(true,0),make_pair(INT_MAX,INT_MAX));
        if(root->left)
            left=solve(root->left,sum);
       
        if(root->right)
            right=solve(root->right,sum);
        
        if(root->val > left.second.second && root->val < right.second.first){
            int  s=left.first.second +right.first.second +root->val;
            if(sum < s)
                sum = s;
            int  minn,maxx;
            if(left.second.first==INT_MIN){
                minn=min(right.second.first,root->val);
            }
            else
            minn=left.second.first;
            if(right.second.second==INT_MAX){
                maxx=max(left.second.second,root->val);
            }
            else
            maxx=right.second.second;
            pair<pair<bool,int>,pair<int,int>>output=make_pair(make_pair(true,s),make_pair(minn,maxx));
                          
            return output;
            
            
        }
        return make_pair(make_pair(false,0),make_pair(INT_MIN,INT_MAX)); 
    }
    int maxSumBST(TreeNode* root) {
        if(root==NULL)return 0;
        int sum=INT_MIN;
        solve(root,sum);
        if(sum<0)return 0;
        return sum;
    }
};
