class Solution {
public:
    string shortestPalindrome(string s) {
        string temp = s + "?";
        string s_rev = s;
        reverse(s_rev.begin(),s_rev.end());
        temp = temp + s_rev;
        
        int n = temp.length(); 

        int lps[n]; 


        fill(lps, lps + n, 0); 

        // KMP Precomputing 
        for (int i = 1; i <n; i++) { 
            int len = lps[i - 1]; 
            while (len > 0 && temp[len] != temp[i]) { 
                len = lps[len - 1]; 
            } 
            if (temp[i] == temp[len]) { 
                len++; 
            } 
            lps[i] = len; 
        }
        int p = lps[n-1];
        int len_t = s.size()-p;
        if(len_t==0)return s;
        else
        {
            string ans = s.substr(p,len_t);
            reverse(ans.begin(),ans.end());
            ans = ans + s;
            return ans;
                
        }
    
    }
};
